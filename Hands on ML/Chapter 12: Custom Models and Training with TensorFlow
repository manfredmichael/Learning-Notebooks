{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Chapter 12: Custom Models and Training with TensorFlow","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOQzec925iJ+Gx0wN9gfS+U"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"8N0ow3Xt56zA"},"source":["# Custom Training Loops"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qxkYUCzU-cyd","executionInfo":{"status":"ok","timestamp":1622982143003,"user_tz":-420,"elapsed":6799,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"ed1beb40-0199-4b7a-813f-3c946b2307a7"},"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import models, layers, losses\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import math\n","\n","(X_train, y_train),(X_test, y_test) = tf.keras.datasets.cifar10.load_data()\n","\n","X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=42)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 2s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zB-KIP95-c3T","executionInfo":{"status":"ok","timestamp":1622982143008,"user_tz":-420,"elapsed":21,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["def prep_pixels(X):\n","\t# convert from integers to floats\n","\tX_scaled = X.astype('float32')\n","\t# normalize to range 0-1\n","\tX_scaled = X_scaled / 255.0\n","\t# return normalized images\n","\treturn X_scaled\n","\n","X_train_scaled = prep_pixels(X_train)\n","X_valid_scaled = prep_pixels(X_valid)\n","X_test_scaled = prep_pixels(X_test)\n","\n","y_train_enc = keras.utils.to_categorical(y_train)\n","y_valid_enc = keras.utils.to_categorical(y_valid)\n","y_test_enc = keras.utils.to_categorical(y_test)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HgVfs8ZTAq38","executionInfo":{"status":"ok","timestamp":1622820810033,"user_tz":-420,"elapsed":585,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"b018aa30-236b-4ec2-8e63-f67e4e172975"},"source":["lr_reg = keras.regularizers.l2(0.05)\n","\n","model = models.Sequential()\n","model.add(layers.Conv2D(32, (3, 3), kernel_initializer='he_uniform', kernel_regularizer=lr_reg, padding='same', input_shape=(32, 32, 3)))\n","model.add(layers.BatchNormalization())\n","model.add(layers.ReLU())\n","model.add(layers.Conv2D(32, (3, 3), kernel_initializer='he_uniform', kernel_regularizer=lr_reg, padding='same'))\n","model.add(layers.BatchNormalization())\n","model.add(layers.ReLU())\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Dropout(0.4))\n","model.add(layers.Flatten())\n","model.add(layers.Dense(128, kernel_initializer='he_uniform', kernel_regularizer=lr_reg))\n","model.add(layers.BatchNormalization())\n","model.add(layers.ReLU())\n","model.add(layers.Dropout(0.5))\n","model.add(layers.Dense(10, activation='softmax'))\n","\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (None, 32, 32, 32)        896       \n","_________________________________________________________________\n","batch_normalization (BatchNo (None, 32, 32, 32)        128       \n","_________________________________________________________________\n","re_lu (ReLU)                 (None, 32, 32, 32)        0         \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 32, 32, 32)        9248      \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 32, 32, 32)        128       \n","_________________________________________________________________\n","re_lu_1 (ReLU)               (None, 32, 32, 32)        0         \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 16, 16, 32)        0         \n","_________________________________________________________________\n","dropout (Dropout)            (None, 16, 16, 32)        0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 8192)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 128)               1048704   \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 128)               512       \n","_________________________________________________________________\n","re_lu_2 (ReLU)               (None, 128)               0         \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 128)               0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 10)                1290      \n","=================================================================\n","Total params: 1,060,906\n","Trainable params: 1,060,522\n","Non-trainable params: 384\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UHC9twKuBd7_"},"source":["@def random_batch(X, y, batch_size=32):\n","    idx = np.random.randint(len(X), size=batch_size)\n","    return X[idx], y[idx]\n","\n","def print_status_bar(iteration, total, loss, metrics=None):\n","    status = \" - \".join([\"{}: {:.4f}\".format(m.name, m.result()) \n","                        for m in ([loss] + metrics or [])])\n","    end = \"\" if iteration < total else \"\\n\"\n","    print(\"\\r{}/{} - \".format(iteration, total) + status, end=end)\n","\n","def train(model, X_train, y_train, optimizer, loss_fn, n_epochs=5, batch_size=32, metrics=[], mean_loss=keras.metrics.Mean(name='mean_loss')):\n","    n_steps = len(X_train) // batch_size\n","\n","    for epoch in range(1, n_epochs+1):\n","        print(\"Epoch {}/{}\".format(epoch, n_epochs))\n","        for step in range(1, n_steps+1):\n","            X_batch, y_batch = random_batch(X_train_scaled, y_train)\n","            with tf.GradientTape() as tape:\n","                y_pred = model(X_batch, training=True)\n","                main_loss = tf.reduce_mean(loss_fn(y_batch, y_pred))\n","                total_loss = tf.add_n([main_loss] + model.losses)\n","                \n","            gradients = tape.gradient(total_loss, model.trainable_variables)\n","            optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n","            mean_loss(total_loss)\n","            for metric in metrics:\n","                metric(y_batch, tf.math.argmax(y_pred, axis=1))\n","\n","            print_status_bar(step * batch_size, len(y_train), mean_loss, metrics)\n","        for metric in metrics:\n","            metric.reset_states()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"119btVzOLVcz","executionInfo":{"status":"ok","timestamp":1622821382072,"user_tz":-420,"elapsed":572046,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"4be7ac92-f7e2-49d7-9214-2fffacec9dea"},"source":["opt = keras.optimizers.SGD(learning_rate=0.001, momentum=0.9)\n","\n","train(model, X_train, y_train,\n","      optimizer=opt,\n","      loss_fn=keras.losses.sparse_categorical_crossentropy,\n","      metrics=[keras.metrics.Accuracy()],\n","      n_epochs=20,\n","      batch_size=32\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","40000/40000 - mean_loss: 9.0626 - accuracy: 0.4013\n","Epoch 2/20\n","40000/40000 - mean_loss: 5.7252 - accuracy: 0.5245\n","Epoch 3/20\n","40000/40000 - mean_loss: 4.4482 - accuracy: 0.5599\n","Epoch 4/20\n","40000/40000 - mean_loss: 3.8036 - accuracy: 0.5730\n","Epoch 5/20\n","40000/40000 - mean_loss: 3.4152 - accuracy: 0.5779\n","Epoch 6/20\n","40000/40000 - mean_loss: 3.1533 - accuracy: 0.5867\n","Epoch 7/20\n","40000/40000 - mean_loss: 2.9697 - accuracy: 0.5836\n","Epoch 8/20\n","40000/40000 - mean_loss: 2.8301 - accuracy: 0.5866\n","Epoch 9/20\n","40000/40000 - mean_loss: 2.7209 - accuracy: 0.5917\n","Epoch 10/20\n","40000/40000 - mean_loss: 2.6333 - accuracy: 0.5947\n","Epoch 11/20\n","40000/40000 - mean_loss: 2.5612 - accuracy: 0.5981\n","Epoch 12/20\n","40000/40000 - mean_loss: 2.5021 - accuracy: 0.5982\n","Epoch 13/20\n","40000/40000 - mean_loss: 2.4508 - accuracy: 0.6028\n","Epoch 14/20\n","40000/40000 - mean_loss: 2.4073 - accuracy: 0.6003\n","Epoch 15/20\n","40000/40000 - mean_loss: 2.3704 - accuracy: 0.6026\n","Epoch 16/20\n","40000/40000 - mean_loss: 2.3384 - accuracy: 0.6021\n","Epoch 17/20\n","40000/40000 - mean_loss: 2.3096 - accuracy: 0.6035\n","Epoch 18/20\n","40000/40000 - mean_loss: 2.2846 - accuracy: 0.6039\n","Epoch 19/20\n","40000/40000 - mean_loss: 2.2619 - accuracy: 0.6045\n","Epoch 20/20\n","40000/40000 - mean_loss: 2.2417 - accuracy: 0.6069\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cETTDU8MML-u"},"source":["# AutoGraph"]},{"cell_type":"code","metadata":{"id":"yyCaD4NmTQZV"},"source":["@tf.function\n","def mean_squared(n):\n","    s = 0\n","    for i in n:\n","        s += i ** 2\n","    return s / len(n)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GwVFZujyTQcf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622822029725,"user_tz":-420,"elapsed":465,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"261d24c4-7826-4109-daf0-b967d340300b"},"source":["mean_squared([2, 2, 2, 2])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=4.0>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p1pqcwZbuWFU","executionInfo":{"status":"ok","timestamp":1622822173902,"user_tz":-420,"elapsed":329,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"3f13ba6b-fe4d-4135-f614-c304c96c5259"},"source":["print(tf.autograph.to_code(mean_squared.python_function))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["def tf__mean_squared(n):\n","    with ag__.FunctionScope('mean_squared', 'fscope', ag__.ConversionOptions(recursive=True, user_requested=True, optional_features=(), internal_convert_user_code=True)) as fscope:\n","        do_return = False\n","        retval_ = ag__.UndefinedReturnValue()\n","        s = 0\n","\n","        def get_state():\n","            return (s,)\n","\n","        def set_state(vars_):\n","            nonlocal s\n","            (s,) = vars_\n","\n","        def loop_body(itr):\n","            nonlocal s\n","            i = itr\n","            s = ag__.ld(s)\n","            s += (i ** 2)\n","        i = ag__.Undefined('i')\n","        ag__.for_stmt(ag__.ld(n), None, loop_body, get_state, set_state, ('s',), {'iterate_names': 'i'})\n","        try:\n","            do_return = True\n","            retval_ = (ag__.ld(s) / ag__.converted_call(ag__.ld(len), (ag__.ld(n),), None, fscope))\n","        except:\n","            do_return = False\n","            raise\n","        return fscope.ret(retval_, do_return)\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1pevyvH4uWIv"},"source":["# Exercise"]},{"cell_type":"markdown","metadata":{"id":"zAZ0OKxJE1QD"},"source":["## Custome Layer Normalization"]},{"cell_type":"code","metadata":{"id":"p5oC5T3VE3qj","executionInfo":{"status":"ok","timestamp":1622982249060,"user_tz":-420,"elapsed":610,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["class MyLayerNormalization(layers.Layer):\n","    def __init__(self, epsilon=0.001, **kwargs):\n","        super().__init__(**kwargs)\n","        self.epsilon = epsilon\n","\n","    def build(self, batch_input_shape):\n","        self.alpha = self.add_weight(name='alpha',\n","                                     shape=batch_input_shape[-1:],\n","                                     initializer=tf.keras.initializers.Ones()) \n","        self.beta = self.add_weight(name='beta',\n","                                     shape=batch_input_shape[-1:],\n","                                     initializer=tf.keras.initializers.Zeros()) \n","        super().build(batch_input_shape)\n","\n","    def call(self, X):\n","        mean, variance = tf.nn.moments(X, axes=-1, keepdims=True)\n","        return self.alpha * (X - mean) / tf.sqrt(variance + self.epsilon) + self.beta \n","\n","    def get_config(self):\n","        base_config = super().get_config()\n","        return {**base_config, 'epsilon': self.epsilon}\n","\n"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"WWLQ-l6cSAs2"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ngqvMSNNHkLx","executionInfo":{"status":"ok","timestamp":1622982249064,"user_tz":-420,"elapsed":11,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["my_norm_model = models.Sequential([MyLayerNormalization()])\n","norm_model = models.Sequential([layers.LayerNormalization()])\n"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DwJSIBTrJsYp","executionInfo":{"status":"ok","timestamp":1622982263808,"user_tz":-420,"elapsed":330,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"6d53cc2e-c59f-42f3-a400-24c3c5884417"},"source":["custom_output =  my_norm_model(X_train[:1].astype(np.float32))\n","keras_output = norm_model(X_train[:1].astype(np.float32))\n","\n","tf.reduce_mean(tf.losses.mean_squared_error(custom_output, keras_output))"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=1.8941801e-12>"]},"metadata":{"tags":[]},"execution_count":11}]}]}