{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Generative Adversarial Network","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNen34ytrdTFOGLCQTCvMEN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"ep5DpUab08PO","executionInfo":{"status":"ok","timestamp":1623063909914,"user_tz":-420,"elapsed":2074,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","from tensorflow.keras import layers, models, losses, optimizers\n","from sklearn.model_selection import train_test_split\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cI21QhMj08x5","executionInfo":{"status":"ok","timestamp":1623063911004,"user_tz":-420,"elapsed":1099,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"a5d44e59-e85a-4b4e-f803-956f07a34b03"},"source":["(X_train, y_train),(X_test, y_test) = tf.keras.datasets.mnist.load_data()\n","images = np.concatenate((X_train, X_test)).reshape(-1, 28, 28, 1) / 255.0\n","labels = np.concatenate((y_train, y_test))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"eyWynD6D73nb","executionInfo":{"status":"ok","timestamp":1623063911005,"user_tz":-420,"elapsed":6,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["BATCH_SIZE = 64\n","STEP_PER_EPOCH = len(images)//BATCH_SIZE"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wbguhi-u5eb2","executionInfo":{"status":"ok","timestamp":1623063916560,"user_tz":-420,"elapsed":5560,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["datagen = tf.data.Dataset.from_tensor_slices(images).shuffle(len(images)).batch(64)"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ewxbzoLW23F_"},"source":["# Model Definition"]},{"cell_type":"markdown","metadata":{"id":"53WVuZQ-3AFM"},"source":["## Config"]},{"cell_type":"code","metadata":{"id":"9TSvEDen3B4l","executionInfo":{"status":"ok","timestamp":1623063916570,"user_tz":-420,"elapsed":41,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["LATENT_DIM = 100"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-V-o-Djp1lfZ"},"source":["## Discriminator"]},{"cell_type":"code","metadata":{"id":"LsVzDz1f1ZjY","executionInfo":{"status":"ok","timestamp":1623066164952,"user_tz":-420,"elapsed":530,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["discriminator_input = layers.Input(shape=(28, 28, 1))\n","x = layers.Conv2D(32, (3, 3), activation='relu', strides=2, padding='same')(discriminator_input)\n","x = layers.Conv2D(64, (3, 3), activation='relu', strides=2, padding='same')(x)\n","x = layers.Flatten()(x)\n","\n","x = layers.Dense(512, activation='relu')(x)\n","discriminator_output = layers.Dense(1, activation='sigmoid')(x)\n","\n","discriminator = models.Model(discriminator_input, discriminator_output)"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZVB7718s2Sjv","executionInfo":{"status":"ok","timestamp":1623066164956,"user_tz":-420,"elapsed":10,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"afd32c13-c10f-4d96-85bd-ce23b7d473db"},"source":["discriminator.summary()"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Model: \"model_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_4 (InputLayer)         [(None, 28, 28, 1)]       0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 14, 14, 32)        320       \n","_________________________________________________________________\n","conv2d_3 (Conv2D)            (None, 7, 7, 64)          18496     \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 3136)              0         \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 512)               1606144   \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 1)                 513       \n","=================================================================\n","Total params: 1,625,473\n","Trainable params: 1,625,473\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cxQdeStd2XUM"},"source":["## Generator"]},{"cell_type":"code","metadata":{"id":"aXRLPWw82x1Y","executionInfo":{"status":"ok","timestamp":1623066165476,"user_tz":-420,"elapsed":5,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["latent_input = layers.Input(shape=(LATENT_DIM))\n","y = layers.Dense(7 * 7 * 64, activation='relu', use_bias=False)(latent_input)\n","y = layers.Reshape((7, 7 ,64))(y)\n","y = layers.Conv2DTranspose(32, (3, 3), strides=2, activation='relu', padding='same', use_bias=False)(y)\n","generator_output = layers.Conv2DTranspose(1, (3, 3), strides=2, activation='sigmoid', padding='same', use_bias=False)(y)\n","\n","generator = models.Model(inputs=[latent_input], outputs=[generator_output])"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"liM9uTXb3W4M","executionInfo":{"status":"ok","timestamp":1623066166176,"user_tz":-420,"elapsed":9,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"015f2bd5-17bd-4082-d5e3-b8892d5bbddc"},"source":["generator.summary()"],"execution_count":35,"outputs":[{"output_type":"stream","text":["Model: \"model_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_5 (InputLayer)         [(None, 100)]             0         \n","_________________________________________________________________\n","dense_6 (Dense)              (None, 3136)              313600    \n","_________________________________________________________________\n","reshape_2 (Reshape)          (None, 7, 7, 64)          0         \n","_________________________________________________________________\n","conv2d_transpose_4 (Conv2DTr (None, 14, 14, 32)        18432     \n","_________________________________________________________________\n","conv2d_transpose_5 (Conv2DTr (None, 28, 28, 1)         288       \n","=================================================================\n","Total params: 332,320\n","Trainable params: 332,320\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rnqYBGE68pdg"},"source":["## Random Latent"]},{"cell_type":"code","metadata":{"id":"hSdDXARe8rcC","executionInfo":{"status":"ok","timestamp":1623066166765,"user_tz":-420,"elapsed":7,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["def generate_random_latent(batch_size=BATCH_SIZE, latent_dim=LATENT_DIM):\n","    return tf.random.uniform(shape=[batch_size, latent_dim])"],"execution_count":36,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sgmRymZZ3YjC"},"source":["# Training"]},{"cell_type":"code","metadata":{"id":"uFIQSnbU3eGv","executionInfo":{"status":"ok","timestamp":1623066325411,"user_tz":-420,"elapsed":483,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["opt = optimizers.Adam(learning_rate=0.0001)\n","loss_fn = losses.BinaryCrossentropy()"],"execution_count":50,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZbZcJhZA313y"},"source":["## Training Loop"]},{"cell_type":"code","metadata":{"id":"2qE1NpjM4wRy","executionInfo":{"status":"ok","timestamp":1623066326447,"user_tz":-420,"elapsed":2,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["def progress_bar(iteration, total, size=30):\n","    running = iteration < total\n","    c = \">\" if running else \"=\"\n","    p = (size - 1) * iteration // total\n","    fmt = \"{{:-{}d}}/{{}} [{{}}]\".format(len(str(total)))\n","    params = [iteration, total, \"=\" * p + c + \".\" * (size - p - 1)]\n","    return fmt.format(*params)\n","\n","def print_status_bar(iteration, total,  metrics=None):\n","    status = \" - \".join([\"{}: {:.4f}\".format(m.name, m.result()) \n","                        for m in (metrics or [])])\n","    print(\"\\r{} - \".format(progress_bar(iteration, total)) + status, end=\"\")"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"id":"2--1vL7335Qg","executionInfo":{"status":"ok","timestamp":1623066326912,"user_tz":-420,"elapsed":2,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["def train(generator, discriminator, datagen, opt, loss_fn, epochs=50):\n","    metrics = {'discriminator_metrics': tf.keras.metrics.MeanAbsoluteError(name='discriminator_mae'),\n","               'generator_metrics': tf.keras.metrics.MeanAbsoluteError(name='generator_mae')}\n","    for e in range(1, epochs + 1):\n","        print('\\nEpoch {}/{}'.format(e, epochs))\n","        for step, real_img in enumerate(datagen):\n","            with tf.GradientTape(persistent=True) as tape:\n","                fake_img = generator(generate_random_latent())\n","                \n","                real_pred = discriminator(real_img)\n","                fake_pred = discriminator(fake_img)\n","\n","                discriminator_loss = tf.add_n([loss_fn(tf.ones(tf.shape(real_pred)), real_pred),\n","                                               loss_fn(tf.zeros(tf.shape(fake_pred)), fake_pred)])\n","                \n","                generator_loss = loss_fn(tf.ones(tf.shape(fake_pred)), fake_pred)\n","\n","            gen_gradients = tape.gradient(generator_loss, generator.trainable_variables)\n","            dis_gradients = tape.gradient(discriminator_loss, discriminator.trainable_variables)\n","            opt.apply_gradients(zip(gen_gradients, generator.trainable_variables))\n","            opt.apply_gradients(zip(dis_gradients, discriminator.trainable_variables))\n","\n","            del tape\n","\n","            metrics['discriminator_metrics'](tf.ones(tf.shape(real_pred)), real_pred)\n","            metrics['discriminator_metrics'](tf.zeros(tf.shape(fake_pred)), fake_pred)\n","            metrics['generator_metrics'](tf.ones(tf.shape(fake_pred)), fake_pred)\n","\n","            print_status_bar(step, STEP_PER_EPOCH, list(metrics.values()))\n","        for metric in metrics.values():\n","            metric.reset_states()\n","\n","\n"],"execution_count":52,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":357},"id":"QVkB-TsSE5m7","executionInfo":{"status":"error","timestamp":1623066337873,"user_tz":-420,"elapsed":10579,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"46c8fb92-b901-46cb-e16b-879617d8c40c"},"source":["train(generator, discriminator, datagen, opt, loss_fn, epochs=100)"],"execution_count":53,"outputs":[{"output_type":"stream","text":["\n","Epoch 1/100\n"," 315/1093 [========>.....................] - discriminator_mae: 0.0000 - generator_mae: 1.0000"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-53-914cd2cc18e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdatagen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-52-c6800823cd14>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(generator, discriminator, datagen, opt, loss_fn, epochs)\u001b[0m\n\u001b[1;32m     23\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mtape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m             \u001b[0mmetrics\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'discriminator_metrics'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreal_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreal_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m             \u001b[0mmetrics\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'discriminator_metrics'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfake_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfake_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m             \u001b[0mmetrics\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'generator_metrics'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfake_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfake_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/metrics.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    235\u001b[0m     \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistribute\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdistributed_training_utils\u001b[0m  \u001b[0;31m# pylint:disable=g-import-not-at-top\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m     return distributed_training_utils.call_replica_local_fn(\n\u001b[0;32m--> 237\u001b[0;31m         replica_local_fn, *args, **kwargs)\n\u001b[0m\u001b[1;32m    238\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/distribute/distributed_training_utils.py\u001b[0m in \u001b[0;36mcall_replica_local_fn\u001b[0;34m(fn, *args, **kwargs)\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextended\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/metrics.py\u001b[0m in \u001b[0;36mreplica_local_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    215\u001b[0m         \u001b[0mupdate_op\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m       \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m         \u001b[0mupdate_op\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_state\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m       \u001b[0mupdate_ops\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mupdate_op\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/utils/metrics_utils.py\u001b[0m in \u001b[0;36mdecorated\u001b[0;34m(metric_obj, *args, **kwargs)\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph_context_for_symbolic_tensors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 86\u001b[0;31m       \u001b[0mupdate_op\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mupdate_state_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     87\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mupdate_op\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# update_op will be None in eager execution.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m       \u001b[0mmetric_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_update\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mupdate_op\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/metrics.py\u001b[0m in \u001b[0;36mupdate_state_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    175\u001b[0m         \u001b[0mcontrol_status\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_status_ctx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    176\u001b[0m         \u001b[0mag_update_state\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mautograph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtf_convert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj_update_state\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontrol_status\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 177\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mag_update_state\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    178\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_state\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdef_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFunction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    690\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    691\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconversion_ctx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 692\u001b[0;31m           \u001b[0;32mreturn\u001b[0m \u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    693\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    694\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ag_error_metadata'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mconverted_call\u001b[0;34m(f, args, kwargs, caller_fn_scope, options)\u001b[0m\n\u001b[1;32m    334\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_in_allowlist_cache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m     \u001b[0mlogging\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Allowlisted %s: from cache'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 336\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_call_unconverted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    337\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mag_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_status_ctx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mag_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mStatus\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDISABLED\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36m_call_unconverted\u001b[0;34m(f, args, kwargs, options, update_cache)\u001b[0m\n\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    462\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 463\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    464\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    465\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/metrics.py\u001b[0m in \u001b[0;36mupdate_state\u001b[0;34m(self, y_true, y_pred, sample_weight)\u001b[0m\n\u001b[1;32m    664\u001b[0m     \u001b[0mmatches\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fn_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    665\u001b[0m     return super(MeanMetricWrapper, self).update_state(\n\u001b[0;32m--> 666\u001b[0;31m         matches, sample_weight=sample_weight)\n\u001b[0m\u001b[1;32m    667\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    668\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mget_config\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/metrics.py\u001b[0m in \u001b[0;36mupdate_state\u001b[0;34m(self, values, sample_weight)\u001b[0m\n\u001b[1;32m    434\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduction\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mmetrics_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mReduction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWEIGHTED_MEAN\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    435\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 436\u001b[0;31m         \u001b[0mnum_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmath_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    437\u001b[0m       \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    438\u001b[0m         \u001b[0mnum_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmath_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce_sum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    204\u001b[0m     \u001b[0;34m\"\"\"Call target, and fall back on dispatchers if there is a TypeError.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 206\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    207\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m       \u001b[0;31m# Note: convert_to_eager_tensor currently raises a ValueError, not a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/ops/math_ops.py\u001b[0m in \u001b[0;36mcast\u001b[0;34m(x, dtype, name)\u001b[0m\n\u001b[1;32m    988\u001b[0m       \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert_to_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"x\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    989\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase_dtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mbase_type\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 990\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgen_math_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    991\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_complex\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mbase_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_floating\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    992\u001b[0m       \u001b[0mlogging\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Casting complex to real discards imaginary part.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/ops/gen_math_ops.py\u001b[0m in \u001b[0;36mcast\u001b[0;34m(x, DstT, Truncate, name)\u001b[0m\n\u001b[1;32m   1873\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1874\u001b[0m       _result = pywrap_tfe.TFE_Py_FastPathExecute(\n\u001b[0;32m-> 1875\u001b[0;31m         _ctx, \"Cast\", name, x, \"DstT\", DstT, \"Truncate\", Truncate)\n\u001b[0m\u001b[1;32m   1876\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1877\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"sYMmGfqbRRPH","executionInfo":{"status":"ok","timestamp":1623066290851,"user_tz":-420,"elapsed":19,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["result = generator(generate_random_latent(1))"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"-6dZaNhoRhz1","executionInfo":{"status":"ok","timestamp":1623066293097,"user_tz":-420,"elapsed":860,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"f8b9296a-db06-40ed-834d-7868709af961"},"source":["plt.imshow(result.numpy().reshape(28, 28), 'gray')"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fd8d8403550>"]},"metadata":{"tags":[]},"execution_count":46},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"24yMqvkVRt2Q"},"source":[""],"execution_count":null,"outputs":[]}]}