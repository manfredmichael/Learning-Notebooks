{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NMT with Attention (seq2seq)","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMRk7R/74DpwyUKVEsg63K5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rxc6Dt2rRdzM","executionInfo":{"status":"ok","timestamp":1622097861433,"user_tz":-420,"elapsed":5034,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"d8a176e1-8463-4a6f-c75d-521bcd246c0a"},"source":["!pip install tensorflow_text"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting tensorflow_text\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/c0/ed/bbb51e9eccca0c2bfdf9df66e54cdff563b6f32daed9255da9b9a541368f/tensorflow_text-2.5.0-cp37-cp37m-manylinux1_x86_64.whl (4.3MB)\n","\u001b[K     |████████████████████████████████| 4.3MB 2.9MB/s \n","\u001b[?25hRequirement already satisfied: tensorflow-hub>=0.8.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_text) (0.12.0)\n","Requirement already satisfied: tensorflow<2.6,>=2.5.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_text) (2.5.0)\n","Requirement already satisfied: protobuf>=3.8.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-hub>=0.8.0->tensorflow_text) (3.12.4)\n","Requirement already satisfied: numpy>=1.12.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-hub>=0.8.0->tensorflow_text) (1.19.5)\n","Requirement already satisfied: six~=1.15.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.15.0)\n","Requirement already satisfied: grpcio~=1.34.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.34.1)\n","Requirement already satisfied: tensorboard~=2.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (2.5.0)\n","Requirement already satisfied: astunparse~=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.6.3)\n","Requirement already satisfied: h5py~=3.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (3.1.0)\n","Requirement already satisfied: keras-nightly~=2.5.0.dev in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (2.5.0.dev2021032900)\n","Requirement already satisfied: gast==0.4.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (0.4.0)\n","Requirement already satisfied: google-pasta~=0.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (0.2.0)\n","Requirement already satisfied: absl-py~=0.10 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (0.12.0)\n","Requirement already satisfied: keras-preprocessing~=1.1.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.1.2)\n","Requirement already satisfied: wheel~=0.35 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (0.36.2)\n","Requirement already satisfied: tensorflow-estimator<2.6.0,>=2.5.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (2.5.0)\n","Requirement already satisfied: typing-extensions~=3.7.4 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (3.7.4.3)\n","Requirement already satisfied: flatbuffers~=1.12.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.12)\n","Requirement already satisfied: termcolor~=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.1.0)\n","Requirement already satisfied: wrapt~=1.12.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.12.1)\n","Requirement already satisfied: opt-einsum~=3.3.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (3.3.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from protobuf>=3.8.0->tensorflow-hub>=0.8.0->tensorflow_text) (56.1.0)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.0.1)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (2.23.0)\n","Requirement already satisfied: google-auth<2,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.30.0)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.8.0)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (0.4.4)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (3.3.4)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (0.6.1)\n","Requirement already satisfied: cached-property; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from h5py~=3.1.0->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.5.2)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (2020.12.5)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (3.0.4)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (4.2.2)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3.6\" in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (4.7.2)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (0.2.8)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.3.0)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (4.0.1)\n","Requirement already satisfied: pyasn1>=0.1.3 in /usr/local/lib/python3.7/dist-packages (from rsa<5,>=3.1.4; python_version >= \"3.6\"->google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (3.1.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (3.4.1)\n","Installing collected packages: tensorflow-text\n","Successfully installed tensorflow-text-2.5.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"y7u92d1xUkno","executionInfo":{"status":"ok","timestamp":1622097863947,"user_tz":-420,"elapsed":2520,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["import numpy as np\n","\n","import typing\n","from typing import Any, Tuple\n","\n","import tensorflow as tf\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","import tensorflow_text as tf_text\n","\n","import matplotlib.pyplot as plt\n","import matplotlib.ticker as ticker"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"jFbGc9g2SC9u","cellView":"form","executionInfo":{"status":"ok","timestamp":1622097863949,"user_tz":-420,"elapsed":42,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["#@title Shape Checker\n","class ShapeChecker():\n","  def __init__(self):\n","    # Keep a cache of every axis-name seen\n","    self.shapes = {}\n","\n","  def __call__(self, tensor, names, broadcast=False):\n","    if not tf.executing_eagerly():\n","      return\n","\n","    if isinstance(names, str):\n","      names = (names,)\n","\n","    shape = tf.shape(tensor)\n","    rank = tf.rank(tensor)\n","\n","    if rank != len(names):\n","      raise ValueError(f'Rank mismatch:\\n'\n","                       f'    found {rank}: {shape.numpy()}\\n'\n","                       f'    expected {len(names)}: {names}\\n')\n","\n","    for i, name in enumerate(names):\n","      if isinstance(name, int):\n","        old_dim = name\n","      else:\n","        old_dim = self.shapes.get(name, None)\n","      new_dim = shape[i]\n","\n","      if (broadcast and new_dim == 1):\n","        continue\n","\n","      if old_dim is None:\n","        # If the axis name is new, add its length to the cache.\n","        self.shapes[name] = new_dim\n","        continue\n","\n","      if new_dim != old_dim:\n","        raise ValueError(f\"Shape mismatch for dimension: '{name}'\\n\"\n","                         f\"    found: {new_dim}\\n\"\n","                         f\"    expected: {old_dim}\\n\")"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZRI4I7EdWYP3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622097863952,"user_tz":-420,"elapsed":35,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"b21ec7c2-2c2f-413f-8988-cea03e00509f"},"source":["# Download the file\n","import pathlib\n","\n","path_to_zip = tf.keras.utils.get_file(\n","    'spa-eng.zip', origin='http://storage.googleapis.com/download.tensorflow.org/data/spa-eng.zip',\n","    extract=True)\n","\n","path_to_file = pathlib.Path(path_to_zip).parent/'spa-eng/spa.txt'"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Downloading data from http://storage.googleapis.com/download.tensorflow.org/data/spa-eng.zip\n","2646016/2638744 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CF5rJ4c_VoUw","executionInfo":{"status":"ok","timestamp":1622097863957,"user_tz":-420,"elapsed":26,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["def load_data(path):\n","  text = path_to_file.read_text(encoding='utf-8')\n","\n","  lines = text.splitlines()\n","  pairs = [line.split('\\t') for line in lines]\n","\n","  inp = [inp for targ, inp in pairs]\n","  targ = [targ for targ, inp in pairs]\n","\n","  return targ, inp"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aG_S5X5AVodR","executionInfo":{"status":"ok","timestamp":1622097865368,"user_tz":-420,"elapsed":1435,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"cbac3cda-2002-47f8-bafd-291c9b666487"},"source":["targ, inp = load_data(path_to_file)\n","print(inp[-1])"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Si quieres sonar como un hablante nativo, debes estar dispuesto a practicar diciendo la misma frase una y otra vez de la misma manera en que un músico de banjo practica el mismo fraseo una y otra vez hasta que lo puedan tocar correctamente y en el tiempo esperado.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NvNoPxGEdTV9","executionInfo":{"status":"ok","timestamp":1622097865369,"user_tz":-420,"elapsed":15,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["BUFFER_SIZE = len(inp)\n","BATCH_SIZE = 64\n","\n","dataset = tf.data.Dataset.from_tensor_slices((inp, targ)).shuffle(BUFFER_SIZE)\n","dataset = dataset.batch(BATCH_SIZE)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"FJpHMwr0dmFM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622097865370,"user_tz":-420,"elapsed":13,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"0c898674-028f-4da0-85d1-41f48e6bd70f"},"source":["for example_input_batch, example_target_batch in dataset.take(1):\n","  print(example_input_batch[:5])\n","  print()\n","  print(example_target_batch[:5])\n","  break"],"execution_count":8,"outputs":[{"output_type":"stream","text":["tf.Tensor(\n","[b'Lea cuidadosamente las instrucciones antes de comenzar.'\n"," b'Solo di que no.' b'Tom no vino al colegio ayer.' b'Usted es la mejor.'\n"," b'Puedes tener el m\\xc3\\xado.'], shape=(5,), dtype=string)\n","\n","tf.Tensor(\n","[b'Read the instructions carefully before you begin.' b'Just say no.'\n"," b\"Tom didn't come to school yesterday.\" b'You are the best.'\n"," b'You can have mine.'], shape=(5,), dtype=string)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"t332guYMXfi5","executionInfo":{"status":"ok","timestamp":1622097865370,"user_tz":-420,"elapsed":9,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["def tf_lower_and_split_punct(text):\n","  # Split accecented characters.\n","  text = tf_text.normalize_utf8(text, 'NFKD')\n","  text = tf.strings.lower(text)\n","  # Keep space, a to z, and select punctuation.\n","  text = tf.strings.regex_replace(text, '[^ a-z.?!,¿]', '')\n","  # Add spaces around punctuation.\n","  text = tf.strings.regex_replace(text, '[.?!,¿]', r' \\0 ')\n","  # Strip whitespace.\n","  text = tf.strings.strip(text)\n","\n","  text = tf.strings.join(['[START]', text, '[END]'], separator=' ')\n","  return text"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sISbf1npagSw","executionInfo":{"status":"ok","timestamp":1622097899697,"user_tz":-420,"elapsed":34335,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"ca693f48-c17a-4758-e23c-bfd00436a6bf"},"source":["max_vocab_size = 5000\n","\n","input_text_processor = preprocessing.TextVectorization(\n","    standardize=tf_lower_and_split_punct,\n","    max_tokens=max_vocab_size)\n","\n","input_text_processor.adapt(inp)\n","\n","# Here are the first 10 words from the vocabulary:\n","input_text_processor.get_vocabulary()[:10]"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['', '[UNK]', '[START]', '[END]', '.', 'que', 'de', 'el', 'a', 'no']"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iBNycpHbbly4","executionInfo":{"status":"ok","timestamp":1622097933716,"user_tz":-420,"elapsed":34034,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"e0e2fe77-57c0-4807-8a58-8faf70022ca5"},"source":["output_text_processor = preprocessing.TextVectorization(\n","    standardize=tf_lower_and_split_punct,\n","    max_tokens=max_vocab_size)\n","\n","output_text_processor.adapt(targ)\n","output_text_processor.get_vocabulary()[:10]"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['', '[UNK]', '[START]', '[END]', '.', 'the', 'i', 'to', 'you', 'tom']"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-CAkk_0gbl9S","executionInfo":{"status":"ok","timestamp":1622097933717,"user_tz":-420,"elapsed":63,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"849d6675-0548-4cca-f81e-df0b957f4735"},"source":["example_tokens = input_text_processor(example_input_batch)\n","example_tokens[:3, :10]"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 10), dtype=int64, numpy=\n","array([[   2, 2469, 2593,   34, 2872,  130,    6, 1660,    4,    3],\n","       [   2,   62,  569,    5,    9,    4,    3,    0,    0,    0],\n","       [   2,   10,    9,  226,   37,  371,  142,    4,    3,    0]])>"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"6u76kJwCtxzd","colab":{"base_uri":"https://localhost:8080/","height":298},"executionInfo":{"status":"ok","timestamp":1622097933719,"user_tz":-420,"elapsed":58,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"2260f660-df77-470d-ea6e-3019a3549719"},"source":["plt.subplot(1, 2, 1)\n","plt.pcolormesh(example_tokens)\n","plt.title('Token IDs')\n","\n","plt.subplot(1, 2, 2)\n","plt.pcolormesh(example_tokens != 0)\n","plt.title('Mask')"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Mask')"]},"metadata":{"tags":[]},"execution_count":13},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bs-GV4agt3Uh","executionInfo":{"status":"ok","timestamp":1622097933721,"user_tz":-420,"elapsed":21,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["embedding_dim = 256\n","units = 1024"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"qkLJLQv7t3YT","executionInfo":{"status":"ok","timestamp":1622097950768,"user_tz":-420,"elapsed":506,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["class Encoder(tf.keras.layers.Layer):\n","    def __init__(self, input_vocab_size, embedding_dim, enc_units):\n","        super(Encoder, self).__init__()\n","        self.enc_units = enc_units\n","        self.input_vocab_size = input_vocab_size\n","\n","        self.embedding = tf.keras.layers.Embedding(self.input_vocab_size, embedding_dim)\n","        self.gru = tf.keras.layers.GRU(self.enc_units,\n","                                       return_sequences=True,\n","                                       return_state=True,\n","                                       recurrent_initializer='glorot_uniform')\n","        \n","    def call(self, tokens, state=None):\n","        shape_checker = ShapeChecker()\n","        shape_checker(tokens, ('batch','s'))\n","\n","        vectors = self.embedding(tokens)\n","        shape_checker(vectors,('batch','s','embed_dim'))\n","\n","        output, state = self.gru(vectors, initial_state=state) \n","        shape_checker(output, ('batch', 's', 'enc_unit'))\n","        shape_checker(state, ('batch', 'enc_unit'))\n","\n","        return output, state\n","\n"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"goNuy4qJknO9"},"source":[""],"execution_count":null,"outputs":[]}]}