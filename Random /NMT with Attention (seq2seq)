{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NMT with Attention (seq2seq)","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMRk7R/74DpwyUKVEsg63K5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rxc6Dt2rRdzM","executionInfo":{"status":"ok","timestamp":1624545743249,"user_tz":-420,"elapsed":4676,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"e4f0f420-e221-4f51-dd83-02b2d1cac4bb"},"source":["!pip install tensorflow_text"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting tensorflow_text\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/c0/ed/bbb51e9eccca0c2bfdf9df66e54cdff563b6f32daed9255da9b9a541368f/tensorflow_text-2.5.0-cp37-cp37m-manylinux1_x86_64.whl (4.3MB)\n","\u001b[K     |████████████████████████████████| 4.3MB 15.1MB/s \n","\u001b[?25hRequirement already satisfied: tensorflow<2.6,>=2.5.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_text) (2.5.0)\n","Requirement already satisfied: tensorflow-hub>=0.8.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_text) (0.12.0)\n","Requirement already satisfied: flatbuffers~=1.12.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.12)\n","Requirement already satisfied: termcolor~=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.1.0)\n","Requirement already satisfied: gast==0.4.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (0.4.0)\n","Requirement already satisfied: keras-preprocessing~=1.1.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.1.2)\n","Requirement already satisfied: protobuf>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (3.12.4)\n","Requirement already satisfied: absl-py~=0.10 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (0.12.0)\n","Requirement already satisfied: wheel~=0.35 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (0.36.2)\n","Requirement already satisfied: wrapt~=1.12.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.12.1)\n","Requirement already satisfied: tensorflow-estimator<2.6.0,>=2.5.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (2.5.0)\n","Requirement already satisfied: opt-einsum~=3.3.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (3.3.0)\n","Requirement already satisfied: six~=1.15.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.15.0)\n","Requirement already satisfied: google-pasta~=0.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (0.2.0)\n","Requirement already satisfied: astunparse~=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.6.3)\n","Requirement already satisfied: keras-nightly~=2.5.0.dev in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (2.5.0.dev2021032900)\n","Requirement already satisfied: tensorboard~=2.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (2.5.0)\n","Requirement already satisfied: grpcio~=1.34.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.34.1)\n","Requirement already satisfied: h5py~=3.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (3.1.0)\n","Requirement already satisfied: typing-extensions~=3.7.4 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (3.7.4.3)\n","Requirement already satisfied: numpy~=1.19.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow<2.6,>=2.5.0->tensorflow_text) (1.19.5)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from protobuf>=3.9.2->tensorflow<2.6,>=2.5.0->tensorflow_text) (57.0.0)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (0.4.4)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.8.0)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.0.1)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (0.6.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (3.3.4)\n","Requirement already satisfied: google-auth<2,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.31.0)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (2.23.0)\n","Requirement already satisfied: cached-property; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from h5py~=3.1.0->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.5.2)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.3.0)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (4.5.0)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3.6\" in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (4.7.2)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (4.2.2)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (2021.5.30)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (3.0.4)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (3.1.1)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (3.4.1)\n","Requirement already satisfied: pyasn1>=0.1.3 in /usr/local/lib/python3.7/dist-packages (from rsa<5,>=3.1.4; python_version >= \"3.6\"->google-auth<2,>=1.6.3->tensorboard~=2.5->tensorflow<2.6,>=2.5.0->tensorflow_text) (0.4.8)\n","Installing collected packages: tensorflow-text\n","Successfully installed tensorflow-text-2.5.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"y7u92d1xUkno","executionInfo":{"status":"ok","timestamp":1624545745276,"user_tz":-420,"elapsed":2033,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["import numpy as np\n","\n","import typing\n","from typing import Any, Tuple\n","\n","import tensorflow as tf\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","import tensorflow_text as tf_text\n","\n","import matplotlib.pyplot as plt\n","import matplotlib.ticker as ticker"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"jFbGc9g2SC9u","cellView":"form","executionInfo":{"status":"ok","timestamp":1624545745278,"user_tz":-420,"elapsed":42,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["#@title Shape Checker\n","class ShapeChecker():\n","  def __init__(self):\n","    # Keep a cache of every axis-name seen\n","    self.shapes = {}\n","\n","  def __call__(self, tensor, names, broadcast=False):\n","    if not tf.executing_eagerly():\n","      return\n","\n","    if isinstance(names, str):\n","      names = (names,)\n","\n","    shape = tf.shape(tensor)\n","    rank = tf.rank(tensor)\n","\n","    if rank != len(names):\n","      raise ValueError(f'Rank mismatch:\\n'\n","                       f'    found {rank}: {shape.numpy()}\\n'\n","                       f'    expected {len(names)}: {names}\\n')\n","\n","    for i, name in enumerate(names):\n","      if isinstance(name, int):\n","        old_dim = name\n","      else:\n","        old_dim = self.shapes.get(name, None)\n","      new_dim = shape[i]\n","\n","      if (broadcast and new_dim == 1):\n","        continue\n","\n","      if old_dim is None:\n","        # If the axis name is new, add its length to the cache.\n","        self.shapes[name] = new_dim\n","        continue\n","\n","      if new_dim != old_dim:\n","        raise ValueError(f\"Shape mismatch for dimension: '{name}'\\n\"\n","                         f\"    found: {new_dim}\\n\"\n","                         f\"    expected: {old_dim}\\n\")"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZRI4I7EdWYP3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624545745293,"user_tz":-420,"elapsed":46,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"891c7a72-c8ba-470b-ee92-cb09f42086c7"},"source":["# Download the file\n","import pathlib\n","\n","path_to_zip = tf.keras.utils.get_file(\n","    'spa-eng.zip', origin='http://storage.googleapis.com/download.tensorflow.org/data/spa-eng.zip',\n","    extract=True)\n","\n","path_to_file = pathlib.Path(path_to_zip).parent/'spa-eng/spa.txt'"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Downloading data from http://storage.googleapis.com/download.tensorflow.org/data/spa-eng.zip\n","2646016/2638744 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CF5rJ4c_VoUw","executionInfo":{"status":"ok","timestamp":1624548121893,"user_tz":-420,"elapsed":884,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["def load_data(path):\n","  text = path_to_file.read_text(encoding='utf-8')\n","\n","  lines = text.splitlines()\n","  pairs = [line.split('\\t') for line in lines]\n","\n","  inp = [inp for targ, inp in pairs]\n","  targ = [targ for targ, inp in pairs]\n","\n","  return targ, inp"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aG_S5X5AVodR","executionInfo":{"status":"ok","timestamp":1624548122541,"user_tz":-420,"elapsed":672,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"ab60422e-98b8-4c40-b233-06b4ff77ad22"},"source":["targ, inp = load_data(path_to_file)\n","print(inp[-1])"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Si quieres sonar como un hablante nativo, debes estar dispuesto a practicar diciendo la misma frase una y otra vez de la misma manera en que un músico de banjo practica el mismo fraseo una y otra vez hasta que lo puedan tocar correctamente y en el tiempo esperado.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NvNoPxGEdTV9","executionInfo":{"status":"ok","timestamp":1624548124594,"user_tz":-420,"elapsed":620,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["BUFFER_SIZE = len(inp)\n","BATCH_SIZE = 64\n","\n","dataset = tf.data.Dataset.from_tensor_slices((inp, targ)).shuffle(BUFFER_SIZE)\n","dataset = dataset.batch(BATCH_SIZE)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"FJpHMwr0dmFM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624548133073,"user_tz":-420,"elapsed":538,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"a90112e1-fac4-44f8-cafa-8d788e3bdfd7"},"source":["for example_input_batch, example_target_batch in dataset.take(1):\n","  print(example_input_batch[:5])\n","  print()\n","  print(example_target_batch[:5])\n","  break"],"execution_count":11,"outputs":[{"output_type":"stream","text":["tf.Tensor(\n","[b'No puedo levantar mi brazo derecho.'\n"," b'Tr\\xc3\\xa1igale por favor a este se\\xc3\\xb1or un vaso de cerveza.'\n"," b'Cerrad los ojos.' b'Tenemos que ser muy cuidadosos.'\n"," b'\\xc2\\xbfCu\\xc3\\xa1l es tu canci\\xc3\\xb3n favorita para hacer ejercicio?'], shape=(5,), dtype=string)\n","\n","tf.Tensor(\n","[b\"I can't lift my right arm.\"\n"," b'Please bring this gentleman a glass of beer.' b'Close your eyes.'\n"," b'We have to be very careful.'\n"," b\"What's your favorite song to workout to?\"], shape=(5,), dtype=string)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"t332guYMXfi5","executionInfo":{"status":"ok","timestamp":1624548182235,"user_tz":-420,"elapsed":508,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["def tf_lower_and_split_punct(text):\n","  # Split accecented characters.\n","  text = tf_text.normalize_utf8(text, 'NFKD')\n","  text = tf.strings.lower(text)\n","  # Keep space, a to z, and select punctuation.\n","  text = tf.strings.regex_replace(text, '[^ a-z.?!,¿]', '')\n","  # Add spaces around punctuation.\n","  text = tf.strings.regex_replace(text, '[.?!,¿]', r' \\0 ')\n","  # Strip whitespace.\n","  text = tf.strings.strip(text)\n","\n","  text = tf.strings.join(['[START]', text, '[END]'], separator=' ')\n","  return text"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sISbf1npagSw","executionInfo":{"status":"ok","timestamp":1624548351432,"user_tz":-420,"elapsed":28449,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"28c44791-dfd8-45ed-88f8-c01985caf7c6"},"source":["max_vocab_size = 5000\n","\n","input_text_processor = preprocessing.TextVectorization(\n","    standardize=tf_lower_and_split_punct,\n","    max_tokens=max_vocab_size)\n","\n","input_text_processor.adapt(inp)\n","\n","# Here are the first 10 words from the vocabulary:\n","input_text_processor.get_vocabulary()[:10]"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['', '[UNK]', '[START]', '[END]', '.', 'que', 'de', 'el', 'a', 'no']"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iBNycpHbbly4","executionInfo":{"status":"ok","timestamp":1624548378888,"user_tz":-420,"elapsed":27479,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"9d44f5d7-3822-456f-cb36-0061c36cd184"},"source":["output_text_processor = preprocessing.TextVectorization(\n","    standardize=tf_lower_and_split_punct,\n","    max_tokens=max_vocab_size)\n","\n","output_text_processor.adapt(targ)\n","output_text_processor.get_vocabulary()[:10]"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['', '[UNK]', '[START]', '[END]', '.', 'the', 'i', 'to', 'you', 'tom']"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-CAkk_0gbl9S","executionInfo":{"status":"ok","timestamp":1624548397701,"user_tz":-420,"elapsed":620,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"1bf583e0-31fd-43a4-9f2c-80c3cd62a3f7"},"source":["example_tokens = input_text_processor(example_input_batch)\n","example_tokens[:3, :10]"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 10), dtype=int64, numpy=\n","array([[   2,    9,   55, 2095,   24,  902,  882,    4,    3,    0],\n","       [   2,    1,   21,   67,    8,   40, 2384,   16,  788,    6],\n","       [   2,    1,   26,  409,    4,    3,    0,    0,    0,    0]])>"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"6u76kJwCtxzd","colab":{"base_uri":"https://localhost:8080/","height":298},"executionInfo":{"status":"ok","timestamp":1624548513964,"user_tz":-420,"elapsed":647,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}},"outputId":"691a50e7-2cad-4c59-a6e7-b3d509105270"},"source":["plt.subplot(1, 2, 1)\n","plt.pcolormesh(example_tokens)\n","plt.title('Token IDs')\n","\n","plt.subplot(1, 2, 2)\n","plt.pcolormesh(example_tokens != 0)\n","plt.title('Mask')"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Mask')"]},"metadata":{"tags":[]},"execution_count":20},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bs-GV4agt3Uh","executionInfo":{"status":"ok","timestamp":1624548559088,"user_tz":-420,"elapsed":473,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["embedding_dim = 256\n","units = 1024"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"qkLJLQv7t3YT","executionInfo":{"status":"ok","timestamp":1624548735380,"user_tz":-420,"elapsed":934,"user":{"displayName":"Technical DSC Gunadarma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi1ItG0iUtuxF4PcvropQFAl8GBQ7dB8zff1DPn=s64","userId":"10637252633069768208"}}},"source":["class Encoder(tf.keras.layers.Layer):\n","    def __init__(self, input_vocab_size, embedding_dim, enc_units):\n","        super(Encoder, self).__init__()\n","        self.enc_units = enc_units\n","        self.input_vocab_size = input_vocab_size\n","\n","        self.embedding = tf.keras.layers.Embedding(self.input_vocab_size, embedding_dim)\n","        self.gru = tf.keras.layers.GRU(self.enc_units,\n","                                       return_sequences=True,\n","                                       return_state=True,\n","                                       recurrent_initializer='glorot_uniform')\n","        \n","    def call(self, tokens, state=None):\n","        shape_checker = ShapeChecker()\n","        shape_checker(tokens, ('batch','s'))\n","\n","        vectors = self.embedding(tokens)\n","        shape_checker(vectors,('batch','s','embed_dim'))\n","\n","        output, state = self.gru(vectors, initial_state=state) \n","        shape_checker(output, ('batch', 's', 'enc_unit'))\n","        shape_checker(state, ('batch', 'enc_unit'))\n","\n","        return output, state\n","\n"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"goNuy4qJknO9"},"source":[""],"execution_count":null,"outputs":[]}]}